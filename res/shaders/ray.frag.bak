#version 460 core

#define PI 3.1415926538

out vec4 fragColor;

in vec3 o_pos;
in vec2 o_uv;
in vec3 o_col;

// uniform vec2 resolution;
uniform mat4 view;
uniform mat4 persp;
uniform float iTime;

uniform vec2 u_screen_size;

uniform mat3 rot;

out vec4 o_color;

float sdf_sphere(in vec3 p, in vec3 c, float r)
{
    return length(p - c) - r;
}
float vmax(vec3 v)
{
    return max(max(v.x, v.y), v.z);
}

float sdf_box (vec3 p, vec3 r)
{
    return length(max(abs(p) - r, 0));
}

float scene(in vec3 p)
{
    float sphere_0 = sdf_sphere(p, vec3(0.0), 1.0);
    float box = sdf_box(p, vec3(1.0)) - 0.5;

    return box;
}

vec3 scene_normal(in vec3 p)
{
    const vec3 small_step = vec3(0.001, 0.0, 0.0);

    float gradient_x = scene(p + small_step.xyy) - scene(p - small_step.xyy);
    float gradient_y = scene(p + small_step.yxy) - scene(p - small_step.yxy);
    float gradient_z = scene(p + small_step.yyx) - scene(p - small_step.yyx);

    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);

    return normalize(normal);
}

vec3 ray_march(in vec3 ro, in vec3 rd)
{
    float total_distance_traveled = 0.0;
    const int NUMBER_OF_STEPS = 32;
    const float MINIMUM_HIT_DISTANCE = 0.001;
    const float MAXIMUM_TRACE_DISTANCE = 1000.0;

    for (int i = 0; i < NUMBER_OF_STEPS; ++i)
    {
        vec3 current_position = ro + total_distance_traveled * rd;

        float distance_to_closest = scene(current_position);

        if (distance_to_closest < MINIMUM_HIT_DISTANCE) 
        {
            vec3 normal = scene_normal(current_position);
            //return normal;
            vec3 light_position = vec3(2.0, 5.0, 3.0);
            vec3 direction_to_light = normalize(current_position - light_position);

            float diffuse_intensity = max(0.0, dot(normal, direction_to_light));

            return vec3(1.0, 0.0, 0.0) * diffuse_intensity;
        }

        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE)
        {
            break;
        }
        total_distance_traveled += distance_to_closest;
    }
    discard;
    return vec3(0.0);
}


struct camera {
    vec3 pos;
    vec3 ray;
    vec3 right;
};

camera rotate_z(camera cam, float deg) {
    deg = radians(deg);
    cam.pos   = mat3(cos(deg), -sin(deg), 0.0,
                     sin(deg),  cos(deg), 0.0,
                     0.0,       0.0,      1.0) * cam.pos;
    cam.ray   = mat3(cos(deg), -sin(deg), 0.0,
                     sin(deg),  cos(deg), 0.0,
                     0.0,       0.0,      1.0) * cam.ray;
    cam.right = mat3(cos(deg), -sin(deg), 0.0,
                     sin(deg),  cos(deg), 0.0,
                     0.0,       0.0,      1.0) * cam.right;
    return cam;
}
camera rotate_right(camera cam, float deg) {
    deg = radians(deg);
    float c = cos(deg);
    float s = sin(deg);
    vec3 a = cam.right;
    cam.pos = mat3(c + (1.0-c)*a.x*a.x    ,   (1.0-c)*a.x*a.y - s*a.z, (1.0-c)*a.x*a.z + s*a.y       ,
                   (1.0-c)*a.x*a.y + s*a.z, c + (1.0-c)*a.y*a.y      ,     (1.0-c)*a.y*a.z - s*a.x   ,
                   (1.0-c)*a.x*a.z - s*a.y, (1.0-c)*a.y*a.z + s*a.x  , c + (1.0-c)*a.z*a.z) * cam.pos;
    cam.ray = mat3(c + (1.0-c)*a.x*a.x    ,   (1.0-c)*a.x*a.y - s*a.z, (1.0-c)*a.x*a.z + s*a.y       ,
                   (1.0-c)*a.x*a.y + s*a.z, c + (1.0-c)*a.y*a.y      ,     (1.0-c)*a.y*a.z - s*a.x   ,
                   (1.0-c)*a.x*a.z - s*a.y, (1.0-c)*a.y*a.z + s*a.x  , c + (1.0-c)*a.z*a.z) * cam.ray;
    return cam;

}
void main()
{
    vec2 uv = o_uv - 0.5;

    camera cam = camera(vec3(0.0, -5.0, 0.0), vec3(uv.x, 1.0, uv.y), vec3(1.0, 0.0, 0.0));
    // cam = rotate_z(cam, rot_z);
    // cam = rotate_right(cam, rot_right);
    cam.pos = rot * cam.pos;
    cam.ray = rot * cam.ray;



    vec3 shaded_color = ray_march(cam.pos, cam.ray);

    o_color = vec4(shaded_color, 1.0);
    o_color = vec4(o_uv, 0.0, 1.0);
}

